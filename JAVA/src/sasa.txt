/*
   import java.util.*;
   interface AdvancedArithmetic
   {
       int divisorSum(int n);
   }

   class Calculator implements AdvancedArithmetic{
       public int divisorSum(int n){
           int sum=1;
           for(int i=2;i<=(n/2);i++){
               if(n%i==0)sum+=i;
           }
           if(n!=1)return sum+n;
           else return sum;
       }
   }

   public class interface_practice{

       public static void main(String[] args) {
           Scanner sc=new Scanner(System.in);
           int n=sc.nextInt();
           AdvancedArithmetic myCalculator=new Calculator();
           int sum=myCalculator.divisorSum(n);
           System.out.println(sum);

       }
   }
*/
____________________________________________________________________


/*2.	Create a class named 'Member' having the following members:
Data members
1 - Name
2 - Age
3 - Phone number
4 - Address
5 - Salary
It also has a method named 'printSalary' which prints the salary of the members.
Two classes 'Employee' and 'Manager' inherits the 'Member' class. The 'Employee' and 'Manager' classes
have data members 'specialization' and 'department' respectively. Now, assign name, age, phone number,
address and salary to an employee and a manager by making an object of both of these classes and print the same.
*/

class Member {
    private String name;
    private int age;
    private String phoneNumber;
    private String address;
    private double salary;

    public Member(String name, int age, String phoneNumber, String address, double salary) {
        this.name = name;
        this.age = age;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.salary = salary;
    }

    public void printSalary() {
        System.out.println("Salary " + salary);
    }
}

class Employee extends Member {
    private String specialization;

    public Employee(String name, int age, String phoneNumber,
                    String address, double salary, String specialization) {
        super(name, age, phoneNumber, address, salary);
        this.specialization = specialization;
    }
}

public class Company {
    public static void main(String[] args) {
        Employee employee = new Employee("Tom", 25, "555-555-55", "Home", 25631.5, "IT");
        Manager manager = new Manager("Ron", 30, "555-617-55", "Earth", 69586.5, "IT");
        employee.printSalary();
        manager.printSalary();
    }
}



______________________________
/*We have to calculate the percentage of marks obtained in
three subjects (each out of 100) by student A and in four subjects (each out of 100) by student B.
Create an abstract class 'Marks' with an abstract method 'getPercentage'.
It is inherited by two other classes 'A' and 'B' each having a method with
the same name which returns the percentage of the students. The constructor of student A
takes the marks in three subjects as its parameters and the marks in
four subjects as its parameters for student B. Create an object for each of the two classes and
print the percentage of marks for both the students.*/
abstract class  Marks {

    public abstract float getPercentage();

}

class A extends Marks{

    int marks1, marks2, marks3;

    A(int m1, int m2, int m3){

        marks1=m1;

        marks2=m2;

        marks3=m3;

    }

    public float getPercentage(){

        float total=((marks1+marks2+marks3)/(float)300)*100;

        return total;

    }

}

class B extends Marks{

    int marks1, marks2, marks3, marks4;

    B(int m1, int m2, int m3, int m4){

        marks1=m1;

        marks2=m2;

        marks3=m3;

        marks4=m4;

    }

    public float getPercentage(){

        float total=((marks1+marks2+marks3+marks4)/(float)400)*100;

        return total;

    }

}
public class percentage

{

    public static void main(String[] args) {

        A a = new A(70, 50, 100);

        System.out.println(a.getPercentage());

        B b = new B(90, 75, 64, 86);

        System.out.println(b.getPercentage());

    }

}

___________________________________________

/*
Write a program to print the names of students by creating a Student class.
If no name is passed while creating an object of Student class, then the name should be "Unknown",
otherwise the name should be equal to the String value passed while creating object of Student class.
 */

class student{
    String ss;
    String name;
    public student(String ss){
        name = ss;
    }
    public student()
    {
        name = "unknown";
    }
}
public class S_data {
    public static void main(String[] args) {
        student obj = new student();
        obj.ss = "Avinash";
        //Student ss1 = new Student();
        System.out.println(obj.ss);
        System.out.println(obj.name);

    }
}


______________________________
/*You are required to compute the power of a number by implementing a calculator.
Create a class MyCalculator which consists of a single method long power(int, int).
This method takes two integers, n  and p, as parameters and finds np. If either n or p is negative,
then the method must throw an exception which says "n or p should not be negative".
Also, if both n and p are zero, then the method must throw an exception which says "n and p should not be zero".
For example, -4 and -5 would result in java.lang.Exception: n or p should not be negative.
Complete the function power in class MyCalculator and return the appropriate result
after the power operation or an appropriate exception as detailed above.
*/

import java.util.Scanner;

class myCalculator{
    int power(int n, int p) throws Exception{
        if(n<0 || p<0)
            throw new Exception("n and p should be non-negative");
        return (int)Math.pow((double)n,(double)p);
    }
}

class power_calculator{

    public static void main(String []argh)
    {
        Scanner in = new Scanner(System.in);

        while(in.hasNextInt())
        {
            int n = in.nextInt();
            int p = in.nextInt();
            myCalculator M = new myCalculator();
            try
            {
                System.out.println(M.power(n,p));
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }

    }
}
____________________________________

/*Write the following code:
A class named Arithmetic with a method named add that takes  integers as parameters and
returns an integer denoting their sum.
A class named Adder that inherits from a superclass named Arithmetic.
*/

class Arithmetic{
}

class Adder extends Arithmetic {
    public int add(int a, int b){
        return a+b;
    }
}

public class arthmetic_adder {
    public static void main(String []args){
        Adder a = new Adder();
        System.out.println("My superclass is: " + a.getClass().getSuperclass().getName());
        System.out.print(a.add(10,32) + " " + a.add(10,3) + " " + a.add(10,10) + "\n");
    }
}

_____________________________________

/*Create two threads, one thread to display all even numbers between 1 and 20,
 another to display odd numbers between 1 and 20.
Note: Display all even numbers followed by odd numbers.
*/

public class even_odd_thread {

    public static void main(String[] args) {
        Runnable r = new Runnable1();
        Thread t = new Thread(r);
        t.start();
        Runnable r2 = new Runnable2();
        Thread t2 = new Thread(r2);
        t2.start();
    }
}

class Runnable2 implements Runnable{
    public void run(){
        for(int i=0;i<11;i++){
            if(i%2 == 1)
                System.out.println(i);
        }
    }
}

class Runnable1 implements Runnable{
    public void run(){
        for(int i=0;i<11;i++){
            if(i%2 == 0)
                System.out.println(i);
        }
    }
}
________________________________________________
/*Write a Person class with an instance variable, age, and a constructor that takes an integer,
initialAge, as a parameter. The constructor must assign initialAge to age after confirming the argument
passed as initialAge is not negative; if a negative argument is passed as initialAge,
the constructor should set age to 0 and print Age is not valid, setting age to 0. In addition,
you must write the following instance methods:
yearPasses() should increase the age instance variable by 1.
amIOld() should perform the following conditional actions:
If age<13, print You are young..
If age>=13 and age<18, print You are a teenager..
Otherwise, print You are old.
*/
import java.util.*;
public class person {
    private int age;

    public person(int initialAge) {
        // Add some more code to run some checks on initialAge
        if(initialAge > 0){
            age = initialAge;
        }else{
            System.out.println("Age is not valid, setting age to 0.");
        }
    }

    public void amIOld() {
        // Write code determining if this person's age is old and print the correct statement:
        if(age<13){
            System.out.println("You are young.");
        }else if(age >= 13 && age < 18){
            System.out.println("You are a teenager.");
        }else{
            System.out.println("You are old.");
        }
    }

    public void yearPasses() {
        // Increment this person's age.
        age++;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int i = 0; i < T; i++) {
            int age = sc.nextInt();
            person p = new person(age);
            p.amIOld();
            for (int j = 0; j < 3; j++) {
                p.yearPasses();
            }
            p.amIOld();
            System.out.println();
        }
        sc.close();
    }
}


______________________________________________

